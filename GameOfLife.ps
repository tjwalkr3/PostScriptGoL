%!PS

/pageSize 15 def                          % Number of cells along each side
/cellSize 15 def                          % Size of each cell in points (pixels)
/iterations 100 def                       % Number of iterations to run Conway's Game of Life
/totalPageSize pageSize cellSize mul def  % Total page size in points
/random false def     % true: init with random, false: init with glider

<< /PageSize [totalPageSize totalPageSize] >> setpagedevice  % Set the actual page size in points

/swap2 { % a b c d -- c d a b prints as b a d c with pstack
    4 2 roll
} def

/drawline { % fromx fromy tox toy --
    swap2
    moveto
    lineto
    stroke
} def

% Draw horizontal line at a given y position (scaled by cellSize)
/hline { % y (in terms of cell index) --
    /y exch def
    0 y cellSize mul totalPageSize y cellSize mul drawline
} def

% Draw vertical line at a given x position (scaled by cellSize)
/vline { % x (in terms of cell index) --
    /x exch def
    x cellSize mul 0 x cellSize mul totalPageSize drawline
} def

% Procedure to draw the grid
/drawGrid {
    % Set the fill color to black, otherwise it will be the last used color
    0 0 0 setrgbcolor

    % Draw the vertical lines for the grid
    0 1 pageSize {
        dup vline         % Draw vertical line at x
    } for

    % Draw the horizontal lines for the grid
    0 1 pageSize {
        dup hline         % Draw horizontal line at y
    } for
} def

% Procedure to fill in cells based on a 2D array of ones and zeros
/fillCells { % gridArray (the array of cells), pageSize (side length) -- 
    /gridArray exch def

    0 1 pageSize 1 sub {  % Iterate over rows (y-axis)
        /row exch def
        0 1 pageSize 1 sub {  % Iterate over columns (x-axis)
            /col exch def
            /currentCell gridArray row get col get def
            currentCell 1 eq {
                col cellSize mul totalPageSize row 1 add cellSize mul sub moveto % move to the bottom left corner of a cell
                cellSize 0 rlineto          % Draw right (to the bottom-right corner)
                0 cellSize rlineto          % Draw up (to the top-right corner)
                cellSize -1 mul 0 rlineto   % Draw left (to the top-left corner)
                closepath                   % Close the path (back to starting point)
                0.1451 0.6563 0.2969 setrgbcolor       % Set the fill color to black
                fill                                   % Fill the square with the current color
            } if
        } for
    } for
} def

/wrapUp {
    % Take index from the stack
    /index exch def

    % Check if index equals count
    index pageSize 1 sub eq { 
        0 
    } { 
        index 1 add 
    } ifelse
} def

/wrapDown {
    % Take index from the stack
    /index exch def

    % Check if index equals 1
    index 0 eq {
        pageSize 1 sub
    } {
        index 1 sub
    } ifelse
} def

/countNeighbors {
    /col exch def
    /row exch def
    /counter 0 def

    % right
    sampleGrid row get col wrapUp get 1 eq { 
        /counter counter 1 add def 
    } if

    % left
    sampleGrid row get col wrapDown get 1 eq { 
        /counter counter 1 add def 
    } if

    % up
    sampleGrid row wrapDown get col get 1 eq { 
        /counter counter 1 add def 
    } if

    % down
    sampleGrid row wrapUp get col get 1 eq { 
        /counter counter 1 add def 
    } if

    % up right
    sampleGrid row wrapDown get col wrapUp get 1 eq { 
        /counter counter 1 add def 
    } if

    % up left
    sampleGrid row wrapDown get col wrapDown get 1 eq { 
        /counter counter 1 add def 
    } if

    % down right
    sampleGrid row wrapUp get col wrapUp get 1 eq { 
        /counter counter 1 add def 
    } if

    % down left
    sampleGrid row wrapUp get col wrapDown get 1 eq { 
        /counter counter 1 add def 
    } if

    counter
} def

/liveOrDie {
    /currentCell exch def
    /neighborCount exch def

    neighborCount 1 gt neighborCount 4 lt and {
        neighborCount 2 eq currentCell 0 eq and {
            false
        } {
            true
        } ifelse
    } {
        false
    } ifelse
} def

/gameOfLife {
    % Create a new empty board (2D array) to store the next state
    /newBoard [pageSize { [pageSize { 0 } repeat]} repeat] def

    % Iterate over each row (y-axis)
    0 1 pageSize 1 sub {
        /row exch def
        0 1 pageSize 1 sub {
            /col exch def
            /neighborCount row col countNeighbors def
            /currentCell sampleGrid row get col get def

            neighborCount currentCell liveOrDie {
                newBoard row get col 1 put  % If the cell should live, update the new board with a 1
            } {
                newBoard row get col 0 put  % If the cell should die, update the new board with a 0
            } ifelse
        } for
    } for

    % Update sampleGrid with the new board for the next iteration
    /sampleGrid newBoard def
} def

/sampleGrid [pageSize { [pageSize { 0 } repeat]} repeat] def

/initializeGlider {
    sampleGrid 2 get 0 1 put
    sampleGrid 2 get 1 1 put
    sampleGrid 2 get 2 1 put
    sampleGrid 1 get 2 1 put
    sampleGrid 0 get 1 1 put
} def

/initializeRandom {
    /sampleGrid [pageSize { [pageSize { rand 2 mod } repeat]} repeat] def
} def

random {
    initializeRandom
} {
    initializeGlider
} ifelse

% Show the same page 10 times
iterations {
    drawGrid
    sampleGrid fillCells
    gameOfLife
    showpage
} repeat


